---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    run: tac-bot
  name: tac-bot
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      run: tac-bot
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: tac-bot
    spec:
      containers:
      - env:
        - name: SPARK_BOT_URL
          value: <<enter your bot url>>
        - name: SPARK_BOT_APP_NAME
          value: <<enter your bot name>>
        - name: SPARK_BOT_EMAIL
          value: <<enter your bot email>>
        - name: SPARK_BOT_TOKEN
          value: <<enter your bot spark token>>
        - name: CASE_API_CLIENT_ID
          value: <<enter your api client id>>
        - name: CASE_API_CLIENT_SECRET
          value: <<enter your api client secret>>
        - name: FEEDBACK_ROOM
          value: <<enter the room you wish to send feedback to>>
        image: docker.io/mbrainar/tac-bot:gcp
        imagePullPolicy: Always
        name: tac-bot
        ports:
        - containerPort: 5000
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: tac-bot
  name: tac-bot
  namespace: default
spec:
  clusterIP: 10.11.242.135
  ports:
  - port: 5000
    protocol: TCP
    targetPort: 5000
  selector:
    run: tac-bot
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: named-ingress
  namespace: default
spec:
  rules:
  - host: <<enter your bot url>>
    http:
      paths:
      - backend:
          serviceName: tac-bot
          servicePort: 5000
